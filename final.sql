DROP DATABASE IF EXISTS TOP_TEN_SONGS; 
CREATE DATABASE TOP_TEN_SONGS; 
USE TOP_TEN_SONGS;

CREATE TABLE ARTIST (ARTIST_ID INT(5) PRIMARY KEY AUTO_INCREMENT, ARTIST_FIRST_NAME VARCHAR(20), ARTIST_LAST_NAME VARCHAR(20), NICK_NAME CHAR(20));

CREATE TABLE ALBUM (ALBUM_ID INT(5) PRIMARY KEY AUTO_INCREMENT, ALBUM_NAME VARCHAR(20), ALBUM_DESCRIPTION VARCHAR(50), YEAR INT(4), ARTIST_ID INT(5) NOT NULL, FOREIGN KEY(ARTIST_ID) REFERENCES ARTIST(ARTIST_ID));

SHOW COLUMNS FROM ALBUM;

CREATE TABLE SONG (SONG_ID  INT(5) PRIMARY KEY AUTO_INCREMENT, SONG_NAME VARCHAR(20), YOUTUBE_LINK VARCHAR(50), YEAR INT(4) REFERENCES ALBUM(YEAR), LENGTH TIME, SONG_DESCRIPTION VARCHAR(80),SONG_RANK INT(5), ARTIST_ID INT(5) NOT NULL, ALBUM_ID INT(5) NOT NULL, FOREIGN KEY(ARTIST_ID) REFERENCES ARTIST(ARTIST_ID), FOREIGN KEY(ALBUM_ID) REFERENCES ALBUM(ALBUM_ID));

SHOW COLUMNS FROM SONG;

SHOW TABLES;

INSERT INTO ARTIST VALUES (1,'Micheal', 'Jackson', 'King of Pop');
INSERT INTO ARTIST VALUES (2, 'Charles Otto','Puth Jr.','Charlie Puth');
INSERT INTO ARTIST VALUES (3,'Adam','Levine','Maroon 5');
INSERT INTO ARTIST VALUES (4,'Peter', 'Hernandez','Bruno Mars');
INSERT INTO ARTIST VALUES (5,'Justin', 'Drew', 'Justin Bieber');
INSERT INTO ARTIST VALUES (6,'Edward', 'Christopher', 'Ed Sheeran');

SELECT * FROM ARTIST; 

INSERT INTO ALBUM VALUES (1,' BAD ', "Micheal Jackson's first production", 1982, 1);
INSERT INTO ALBUM VALUES (2,'Fast and Furious', "The most watched youtube video in the world", 2015, 2);
INSERT INTO ALBUM VALUES (3,'V', "This is song is Maroon five's most lovable video", 2014, 3);
INSERT INTO ALBUM VALUES (4,'Uptown Special', "My favourite dancing album", 2015, 4);
INSERT INTO ALBUM VALUES (5,'Purpose', "The most famous album of JB", 2015, 5);
INSERT INTO ALBUM VALUES (6,'Divide', "The most trending album of 2017", 2017, 6);

SELECT * FROM ALBUM;

INSERT INTO SONG VALUES (1,'Beat it', 'https://www.youtube.com/watch?v=ordxufdoqe0', 1982, 0458, "Beat it was the most famous song of BAD", 1, 1, 1);
INSERT INTO SONG VALUES (2,'Thriller', 'https://www.youtube.com/watch?v=sOnqjkJTMaA', 1982, 1342, "Thriller was the 2nd most famous song of BAD", 2, 1, 1);
INSERT INTO SONG VALUES (3,'Smooth Criminal', 'https://www.youtube.com/watch?v=h_D3VFfhvs4', 1982, 0925, "As I am a huge MJ fan my top 3 were of BAD", 3, 1, 1);
INSERT INTO SONG VALUES (4,'See You Again', 'https://www.youtube.com/watch?v=RgKAFK5djSk', 2015, 0357, "This song is close to my heart as I have to move on from India", 4, 2, 2);
INSERT INTO SONG VALUES (5,'Sugar', 'https://www.youtube.com/watch?v=09R8_2nJtjg', 2015, 0501, "A very catchy song which I love to play in Car", 5, 3, 3);
INSERT INTO SONG VALUES (6,'Uptown Funk', 'https://www.youtube.com/watch?v=OPf0YbXqDm0', 2014, 0430, "most favourite dancing song", 6, 4, 4);
INSERT INTO SONG VALUES (7,'Just the way you are', 'https://www.youtube.com/watch?v=LjhCEhWiKXk', 2010, 0401, "This makes me wanna go up to my crush and say You're Beautiful", 7, 4, 4);
INSERT INTO SONG VALUES (8,'Sorry', 'https://www.youtube.com/watch?v=fRh_vgS2dFE', 2015, 0325, "I don't know what type of dance is this but it's amazing?", 8, 5, 5);
INSERT INTO SONG VALUES (9,'Despacito', 'https://www.youtube.com/watch?v=72UO0v5ESUo', 2017, 0348, "My favourite famous Spanish song?", 9, 5, 5);
INSERT INTO SONG VALUES (10,'Shape Of You', 'https://www.youtube.com/watch?v=JGwWNGJdvx8', 2017, 0423, "My most favourite song this year(2017)?", 10, 6, 6);

ALTER TABLE SONG MODIFY COLUMN ARTIST_ID INT(5) AFTER SONG_ID;
SELECT * FROM SONG;

CREATE VIEW TOP_TEN AS SELECT ALBUM.ALBUM_NAME, SONG.YEAR, SONG.LENGTH, SONG.SONG_NAME, SONG.YOUTUBE_LINK FROM SONG JOIN ALBUM ON ALBUM.ALBUM_ID = SONG.ALBUM_ID WHERE SONG_ID <= 10; 
SELECT * FROM TOP_TEN;

CREATE VIEW TOP_FIVE AS SELECT ALBUM.ALBUM_NAME, SONG.YEAR, SONG.LENGTH, SONG.SONG_NAME, SONG.YOUTUBE_LINK FROM SONG JOIN ALBUM ON ALBUM.ALBUM_ID = SONG.ALBUM_ID WHERE SONG_ID <= 5 ORDER BY SONG.SONG_RANK;
SELECT * FROM TOP_FIVE;

CREATE VIEW WORST_FIVE AS SELECT ALBUM.ALBUM_NAME, SONG.YEAR, SONG.LENGTH, SONG.SONG_NAME, SONG.YOUTUBE_LINK FROM SONG JOIN ALBUM ON ALBUM.ALBUM_ID = SONG.ALBUM_ID WHERE SONG_ID > 5 ORDER BY SONG.SONG_RANK DESC;
SELECT * FROM WORST_FIVE;

CREATE VIEW ALBUMS AS SELECT ALBUM.ALBUM_NAME, SONG.SONG_NAME, ALBUM.YEAR FROM ALBUM JOIN SONG ON SONG.ALBUM_ID = ALBUM.ALBUM_ID;
SELECT * FROM ALBUMS;

CREATE VIEW ARTISTS AS SELECT ARTIST.ARTIST_FIRST_NAME, ARTIST.ARTIST_LAST_NAME, ARTIST.PSEUDONYM, ALBUM.ALBUM_NAME, SONG.SONG_NAME FROM ARTIST JOIN SONG ON SONG.ARTIST_ID = ARTIST.ARTIST_ID JOIN ALBUM ON ALBUM.ALBUM_ID = SONG.ALBUM_ID;
SELECT * FROM ARTISTS;
DROP VIEW ARTISTS;
CREATE VIEW ARTISTS AS SELECT ARTIST.PSEUDONYM, ALBUM.ALBUM_NAME, SONG.SONG_NAME FROM ARTIST JOIN SONG ON SONG.ARTIST_ID = ARTIST.ARTIST_ID JOIN ALBUM ON ALBUM.ALBUM_ID = SONG.ALBUM_ID; 
SELECT * FROM ARTISTS;

CREATE VIEW TOTAL_RUN_TIME AS SELECT SEC_TO_TIME(SUM(TIME_TO_SEC(LENGTH))) AS TOTAL_TIME FROM SONG WHERE SONG_ID <= 10 ORDER BY SONG.SONG_RANK;
SELECT * FROM TOTAL_RUN_TIME;

CREATE VIEW LONGEST_SONG_SHORTEST_SONG AS (SELECT SONG.SONG_NAME , CONCAT(ARTIST.ARTIST_FIRST_NAME, " ", ARTIST.ARTIST_LAST_NAME) ARTIST_NAME, MIN(SONG.LENGTH) , SONG.YOUTUBE_LINK FROM SONG 
JOIN ARTIST ON ARTIST.ARTIST_ID = SONG.ARTIST_ID WHERE SONG.LENGTH = (SELECT MIN(SONG.LENGTH) FROM SONG)) UNION (SELECT SONG_NAME,CONCAT(ARTIST.ARTIST_FIRST_NAME, " ", ARTIST.ARTIST_LAST_NAME) ARTIST_NAME, MAX(SONG.LENGTH), SONG.YOUTUBE_LINK  
FROM SONG JOIN ARTIST ON ARTIST.ARTIST_ID = SONG.ARTIST_ID WHERE SONG.LENGTH = (SELECT MAX(SONG.LENGTH) FROM SONG));
SELECT * FROM LONGEST_SONG_SHORTEST_SONG;

CREATE USER 'Lars' IDENTIFIED BY 'password';
GRANT ALL ON TOP_TEN_SONGS.* TO 'Lars';

CREATE USER 'James' IDENTIFIED BY 'password';
GRANT SELECT ON VIEW.* TO 'James';

CREATE USER 'Robert' IDENTIFIED BY 'password';
GRANT SELECT ON TOP_TEN_SONGS.TOP_TEN TO 'Robert';
GRANT SELECT ON TOP_TEN_SONGS.TOP_FIVE TO 'Robert';
GRANT SELECT ON TOP_TEN_SONGS.WORST_FIVE TO 'Robert';

CREATE USER 'Kirk' IDENTIFIED BY 'password';
GRANT SELECT ON TOP_TEN_SONGS.ALBUMS TO 'Kirk';
GRANT SELECT ON TOP_TEN_SONGS.ARTISTS TO 'Kirk';
GRANT SELECT ON TOP_TEN_SONGS.TOTAL_RUN_TIME TO 'Kirk';
GRANT SELECT ON TOP_TEN_SONGS.LONGEST_SONG_SHORTEST_SONG TO 'Kirk'; 
 










